name: Rust

# On Rust, GitHub Actions, and caching
# ===========
# Here's a list of things to keep in mind if you find yourself maintaing this
# CI:
#
# - `rustup show` is an unintuitive yet simple way to install and select your
#   desired Rust toolchain from `rust-toolchain.toml`.
#   See:
#     - https://github.com/rust-lang/rustup/issues/1397
#     - https://github.com/rust-lang/rustup/issues/2686
# - Always install and select the desired Rust toolchain before running
#   `Swatinem/rust-cache`. This is because the active Rust toolchain is used as
#   a cache key.
# - Be extremely aware of cache thrashing a.k.a. churning. GitHub Actions' cache
#   allows for 10GiB of data which is easily exceeded if not careful. The time
#   is takes to run your new, shiny CI might look very different 6 months from
#   now when your cache is overweight and has been invalidated over and over.
#   It's better not to cache than cache excessively (which kind of defeats the
#   purpose of a cache â€“ GitHub should really do better here).

on:
  push:
    branches: ["nightly", "stable"]
    paths-ignore:
      - "**.md"
  pull_request:
    branches: ["nightly", "stable"]
    paths-ignore:
      - "**.md"

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings

# Automatically cancels a job if a new commit if pushed to the same PR, branch, or tag.
# Source: <https://stackoverflow.com/a/72408109/5148606>
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  check:
    runs-on: ubuntu-latest
    name: check
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - name: Setup Rust toolchain
        run: rustup show
      - uses: Swatinem/rust-cache@v2
      - name: Run lint
        run: |
          if ! make lint ; then
            echo "Linting or formatting errors detected, please run 'make lint-fix' to fix it";
            exit 1
          fi

  # TODO: Temporary before migration to RiscZero 0.15: https://github.com/Sovereign-Labs/sovereign-sdk/issues/338
  #   After that demo-prover should be integrated into workspace
  check-demo-prover:
    runs-on: ubuntu-latest
    name: check demo prover
    timeout-minutes: 90
    steps:
      - uses: actions/checkout@v3
      - name: Setup Rust toolchain
        run: rustup show
      - uses: Swatinem/rust-cache@v2
      - name: Run cargo check
        run: cd examples/demo-prover && cargo check
      - name: Run cargo fmt check
        run: |
          cd examples/demo-prover;
          if ! cargo fmt --check ; then
            echo "Formatting errors detected, please run 'cargo fmt' to fix it";
            exit 1
          fi

  # Check that every combination of features is working properly.
  hack:
    runs-on:
      group: 8-cores_32GB_Ubuntu Group
    name: features
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - name: Setup Rust toolchain
        run: rustup show
      - uses: Swatinem/rust-cache@v2
      - name: cargo install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      # intentionally no target specifier; see https://github.com/jonhoo/rust-ci-conf/pull/4
      - name: cargo hack
        run: make check-features
  test:
    runs-on:
      group: 8-cores_32GB_Ubuntu Group
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - name: Setup Rust toolchain
        run: rustup show
      - uses: Swatinem/rust-cache@v2
      - name: Run cargo test
        run: cargo test --all-features
  test-experimental:
    runs-on:
      group: 8-cores_32GB_Ubuntu Group
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - name: Run cargo test --features experimental
        run: cargo test --features experimental
  coverage:
    runs-on:
      group: 8-cores_32GB_Ubuntu Group
    timeout-minutes: 90
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: add llvm component
        run: rustup component add llvm-tools-preview
      - uses: Swatinem/rust-cache@v2
      - name: cargo install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: cargo llvm-cov
        run: make coverage
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          # When retry is implemented, we can enable it again: https://github.com/codecov/codecov-action/issues/926
          fail_ci_if_error: false
  demo-rollup-local:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: start celestia local
        working-directory: ./examples/demo-rollup
        run: make start
      - name: start sovereign demo-rollup
        working-directory: ./examples/demo-rollup
        run: |
          cargo build
          ../../target/debug/sov-demo-rollup &
      - name: wait for service to be up
        run: |
          SECONDS=0
          until curl -s -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","method":"bank_balanceOf","params":["sov15vspj48hpttzyvxu8kzq5klhvaczcpyxn6z6k0hwpwtzs4a6wkvqmlyjd6","sov16m8fxq0x5wc5aw75fx9rus2p7g2l22zf4re72c3m058g77cdjemsgscxvf"],"id":1}' http://127.0.0.1:12345; [ $? -eq 0 ] || [ $SECONDS -ge 1200 ]
          do
            echo "Curl failed or server not ready yet, sleeping for 5 seconds..."
            sleep 5
          done
      - name: submit rollup transaction
        working-directory: ./examples/demo-rollup
        run: make test-create-token
      - name: evaluate result
        # simple grep check on RPC to verify if the curl output contains "1000" which is the supply of token - could use jq and parse, but considering this won't change, it seems like a simple check to get it out quick
        # if we want more complex parsing in the future and validation, we can switch to jq or other tools
        run: |
          SECONDS=0
          until curl -f -s -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","method":"bank_balanceOf","params":["sov15vspj48hpttzyvxu8kzq5klhvaczcpyxn6z6k0hwpwtzs4a6wkvqmlyjd6","sov16m8fxq0x5wc5aw75fx9rus2p7g2l22zf4re72c3m058g77cdjemsgscxvf"],"id":1}' http://127.0.0.1:12345 | grep 1000; [ $? -eq 0 ] || [ $SECONDS -ge 300 ]
          do
            echo "Curl failed, retrying in 5 seconds..."
            sleep 5
          done

  check-licenses:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
      - name: Setup Rust toolchain
        run: rustup show
      - run: cargo install cargo-deny
      - run: cargo deny check licenses

  cargo-doc-artifact:
    runs-on: ubuntu-latest
    needs: check
    timeout-minutes: 90
    # We only deploy `cargo doc` to GH pages on `stable`, but let's at least
    # build it on `nightly` as well to avoid nasty surprises when merging
    # `nightly` into `stable`. Running it on every PR would be excessive,
    # though.
    if: (github.ref == 'refs/heads/stable') || (github.ref == 'refs/heads/nightly')
    steps:
      - uses: actions/checkout@v3
      - name: Setup Rust toolchain
        run: rustup show
      - uses: Swatinem/rust-cache@v2
      # The docs' artifact tends to become quite large with all the
      # dependencies, so we don't include them.
      - run: cargo doc --no-deps
      - name: Add index.html
        # We're inside a Cargo workspace, so there's no index.html by default.
        # We must redirect to one of the workspace member crates' documentation.
        # <https://dev.to/deciduously/prepare-your-rust-api-docs-for-github-pages-2n5i>
        run: echo '<meta http-equiv="refresh" content="0; url=sov_rollup_interface/index.html">' > target/doc/index.html
      # https://github.com/actions/deploy-pages/issues/188
      - name: Fix assets' file permissions
        run: chmod -c -R +rX "target/doc"
      - name: Upload artifacts
        uses: actions/upload-pages-artifact@v1
        with:
          path: target/doc
  deploy-github-pages:
    needs: cargo-doc-artifact
    timeout-minutes: 5
    if: github.ref == 'refs/heads/stable'
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source
    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
  check-demo-rollup-table-of-contents:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - run: npm install -g doctoc
      - name: Update table of contents
        run: doctoc README.md --github --notitle
        working-directory: ./examples/demo-rollup
      - name: Check table of contents
        # Exit status 0 means no changes were made, so the table of contents is
        # up to date.
        run: git diff --exit-code
